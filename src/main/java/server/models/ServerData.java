package server.models;

import server.interfaces.Game;
import server.interfaces.Quiz;

import java.io.Serializable;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Class to represent the data that is generated by the Quiz server
 * and what needs to be persisted on a server restart.
 *
 * @author Michael Bragg
 */
public class ServerData implements Serializable {

    private ConcurrentMap<Integer, Quiz> quizzes;
    private ConcurrentMap<Integer, List<Game>> games;
    private int quizIDs;
    private int questionIDs;
    private int gameIDs;

    public ServerData() {
        quizzes = new ConcurrentHashMap<>();
        games = new ConcurrentHashMap<>();
        this.quizIDs = 0;
        this.questionIDs = 0;
        this.gameIDs = 0;
    }

    public ConcurrentMap<Integer, Quiz> getQuizzes() {
        return quizzes;
    }

    public void addQuiz(int key, Quiz quiz) {
        quizzes.put(key, quiz);
    }

    public void addGame(int key, List<Game> gamesList) {
        games.put(key, gamesList);
    }

    public Quiz getQuiz(int quizId) throws NullPointerException {
        if (!quizzes.containsKey(quizId)) {
            throw new NullPointerException("Could not find a quiz with the ID of: " + quizId);
        }
        return quizzes.get(quizId);
    }

    public List<Game> getGame(int quizId) throws NullPointerException {
        return games.get(quizId);
    }

    /*
    A call to get a new Quiz/Question/Game ID also increments the ID value.
     */

    public int getQuizID() {
        int id = quizIDs;
        ++quizIDs;
        return id;
    }

    public int getQuestionID() {
        int id = questionIDs;
        ++questionIDs;
        return id;
    }

    public int getGameID() {
        int id = gameIDs;
        ++gameIDs;
        return id;
    }
}